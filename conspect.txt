Виртуальное окружение:  python -m venv venv
При запуске виртуального окружения может возникнуть ошибка: https://gist.github.com/2ik/3ddbef3263dee8e76b63a391e2ffe5d0?permalink_comment_id=4077417
Запуск виртуального окружения: .\venv\Scripts\activate 
Создание файла с зависимостями: pip freeze > requirements.txt
Загрузка библиотек с помощю файла с зависимостями: pip install -r requirements.txt
.gitignore - для игнорирования файлов (не загрузяться на git)
Создание проекта django: django-admin startproject <имя>
При запуске сервера нужно находиться в папке приложения!
Запуск сервера: python manage.py runserver
При создании приложения нужно находиться в папке проекта!
Создание приложения django: python manage.py startapp <имя>
Консоль для ручной отладки: python manage.py shell, для выхода exit()

@
# Вьюхи для ответа используют HttpResponseexit
# from django.http import HttpResponse 
# Не прописываем урлы в главном приложении а прописываем в самом приложении для гибкости path('', include('women.urls')) 
# т.к это позволит нам перенести все наше приложение в другой проект и прописать всего однй строку в урлах главного приложения
@

--
Создание миграции: python manage.py makemigrations
Просмотр SQL-запроса миграции: python manage.py sqlmigrate <папка_модели>=women <номер_миграции>=0001
Выполнение миграции: python manage.py migrate
--

@
У моделей есть менеджер (Имя_модели.objects.метод_менеджера), который содержит методы по типу (create(), order_by(), и т.п), менеджер можно переопределить
Для работы с моделями нужно импоритровати их: from women.models import Women
Для создания записи в таблице (с сохранением): Women.objects.create(title='Uladzislau Bychkouski', content='is programmist')
---
Для создания записи в таблице (без моментального сохранения) ленивый запрос: 
w1 = Women.(title='Uladzislau Bychkouski', content='is programmist')
w1.save()
---
Методы менеджера:
.all() - вернёт все записи в таблице    (список)
.create() - создает и сохраняет запись в таблицу
.filter(поле='значение') - фильтрует записи по условию (поле3__gte это >=, поле__lte это <=)    (список)
.exclude(поле='значение') - противоположен .filter()
.order_by('поле') - Сортирует записи по полю в таблице     (список)
.get(поле='значение') - вернёт одну запись (если нужно вернуть одну запись), если две записи то вернёт ошибку
---
Для изменения или удаления записи:
1. Находим и сохранением запись в переменную;   | w1 = Women.objects.get(pk=1) |
2. УДАЛЕНИЕ:   | w1.delete() |
2. ИЗМЕНЕНИЕ: Переопределяем поля(атрибуты обьекта);   | w1.title='Значение' |
3. Сохраняем;    | w1.save() |
---
Women.objects.filter(id__gte=2).order_by('-title') - МОЖНО ДЕЛАТЬ ЦЕПОЧКУ МЕТОДОВ (все одним запросом)
@


@
АДМИНКА
python manage.py createsuperuser - создает админа 